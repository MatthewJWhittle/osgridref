letter1 <- list(
"S" = c(0, 0),
"T" = c(5, 0),
"N" = c(0, 5),
"H" = c(0, 10),
"O" = c(5, 5)
)
letter1 <- do.call(rbind, letter1)
letter2 <- list(
"A" = c(y = 4, x = 0),
"B" = c(4, 1),
"C" = c(4, 2),
"D" = c(4, 3),
"E" = c(4, 4),
"F" = c(3, 0),
"G" = c(3, 1),
"H" = c(3, 2),
"J" = c(3, 3),
"K" = c(3, 4),
"L" = c(2, 0),
"M" = c(2, 1),
"N" = c(2, 2),
"O" = c(2, 3),
"P" = c(2, 4),
"Q" = c(1, 0),
"R" = c(1, 1),
"S" = c(1, 2),
"T" = c(1, 3),
"U" = c(1, 4),
"V" = c(0, 0),
"W" = c(0, 1),
"X" = c(0, 2),
"Y" = c(0, 3),
"Z" = c(0, 4)
)
letter2 <- do.call(rbind, letter2)[, c("x", "y")]
letter1 <- rownames(letter1)
letter2 <- rownames(letter2)
letter2
letter1
letter1
letter1
numbers <- letter1[i,] + letter2
numbers
letter1
dim(letter1)
do.call(rbind, letter2)[, c("x", "y")]
letter1 <- list(
"S" = c(0, 0),
"T" = c(5, 0),
"N" = c(0, 5),
"H" = c(0, 10),
"O" = c(5, 5)
)
letter1 <- do.call(rbind, letter1)
letter1
letter2 <- list(
"A" = c(y = 4, x = 0),
"B" = c(4, 1),
"C" = c(4, 2),
"D" = c(4, 3),
"E" = c(4, 4),
"F" = c(3, 0),
"G" = c(3, 1),
"H" = c(3, 2),
"J" = c(3, 3),
"K" = c(3, 4),
"L" = c(2, 0),
"M" = c(2, 1),
"N" = c(2, 2),
"O" = c(2, 3),
"P" = c(2, 4),
"Q" = c(1, 0),
"R" = c(1, 1),
"S" = c(1, 2),
"T" = c(1, 3),
"U" = c(1, 4),
"V" = c(0, 0),
"W" = c(0, 1),
"X" = c(0, 2),
"Y" = c(0, 3),
"Z" = c(0, 4)
)
letter2 <- do.call(rbind, letter2)[, c("x", "y")]
letter2
square_letter1 <- rownames(letter1)
square_letter2 <- rownames(letter2)
#' OS GB Look up table
#'
#' This function creates a lookup table of os grid square letters and numbers
#' @keywords osgb grid reference look up
#' @return A \code{data.frame} of
osgb_lookup <- function() {
letter1 <- list(
"S" = c(0, 0),
"T" = c(5, 0),
"N" = c(0, 5),
"H" = c(0, 10),
"O" = c(5, 5)
)
letter1 <- do.call(rbind, letter1)
letter2 <- list(
"A" = c(y = 4, x = 0),
"B" = c(4, 1),
"C" = c(4, 2),
"D" = c(4, 3),
"E" = c(4, 4),
"F" = c(3, 0),
"G" = c(3, 1),
"H" = c(3, 2),
"J" = c(3, 3),
"K" = c(3, 4),
"L" = c(2, 0),
"M" = c(2, 1),
"N" = c(2, 2),
"O" = c(2, 3),
"P" = c(2, 4),
"Q" = c(1, 0),
"R" = c(1, 1),
"S" = c(1, 2),
"T" = c(1, 3),
"U" = c(1, 4),
"V" = c(0, 0),
"W" = c(0, 1),
"X" = c(0, 2),
"Y" = c(0, 3),
"Z" = c(0, 4)
)
letter2 <- do.call(rbind, letter2)[, c("x", "y")]
square_letter1 <- rownames(letter1)
square_letter2 <- rownames(letter2)
lookup_list <-
lapply(
c(1:dim(letter1)[1]),
function(i) {
numbers <- letter1[i,] + letter2
cbind.data.frame(square_letters = paste0(square_letter1[i], square_letter2), numbers, stringsAsFactors = F)
}
)
lookup <- as.data.frame(do.call(rbind, lookup_list), stringsAsFators = FALSE)
return(lookup)
}
osgb_lookup()
grid_refs <- c("TA 304 403", "SE 2344 0533", "SE13")
gridref_to_xy(grid_refs)
#' Convert Grid Ref to XY
#'
#' This function converts ordinance survey grid references to eastings northing
#'
#' @param x A vector of ordinance survey grid references such as 'TA 123 231'
#' @return A data.frame of eastings and northings coordinates and their resolution
#' @export
#' @import stringr
#' @importFrom magrittr %>%
#' @import dplyr
osgridref_to_xy <- function(x) {
# Get the square letters and numbers
square_letters <- str_extract(x, "^[a-zA-Z]{2}") %>% str_to_upper()
numbers <- str_extract(x, "[0-9]+ ?[0-9]+") %>% str_remove_all(" ")
# Split the numbers into x and y
# Get the resolution from number of digits
digits <- nchar(numbers)
uneven_digits <- !(digits %% 2 == 0)
# Set invalid grid references to NA
numbers[uneven_digits] <- NA
# Split for later addition
coord_digits <- digits / 2
grid_x <- substr(numbers, 1, coord_digits)
grid_y <- substr(numbers, coord_digits + 1, digits)
# Calculate the resolution
resolution <- 10 ^ (5 - coord_digits)
x_num <- as.numeric(grid_x) * resolution
y_num <- as.numeric(grid_y) * resolution
# Build a tibble of in data
in_coords <-
dplyr::tibble(
in_letters = square_letters,
in_ref = x,
resolution = resolution,
in_x = x_num,
in_y = y_num
)
# Get the osgb square lookup
lookup <- osgb_lookup() %>%
dplyr::mutate(
xmin = paste0(x, "00000") %>% as.numeric(),
ymin = paste0(y, "00000") %>% as.numeric()
)
# Perform a joins operation to match up the grid refs with their squares
out_coords <-
in_coords %>%
dplyr::left_join(lookup,
by = c("in_letters" = "square_letters")) %>%
dplyr::mutate(out_x = xmin + in_x,
out_y = ymin + in_y)
# Select and rename variables for clean output
out_coords <-
out_coords %>%
dplyr::select(x = out_x, y = out_y, resolution)
# This could return a spatial object but would have to deal with NA values
return(out_coords)
}
osgridref_to_xy(grid_refs)
#' Convert Grid Ref to XY
#'
#' This function converts ordinance survey grid references to eastings northing
#'
#' @param x A vector of ordinance survey grid references such as 'TA 123 231'
#' @return A data.frame of eastings and northings coordinates and their resolution
#' @export
#' @import stringr
#' @importFrom magrittr `%>%`
#' @import dplyr
osgridref_to_xy <- function(x) {
# Get the square letters and numbers
square_letters <- str_extract(x, "^[a-zA-Z]{2}") %>% str_to_upper()
numbers <- str_extract(x, "[0-9]+ ?[0-9]+") %>% str_remove_all(" ")
# Split the numbers into x and y
# Get the resolution from number of digits
digits <- nchar(numbers)
uneven_digits <- !(digits %% 2 == 0)
# Set invalid grid references to NA
numbers[uneven_digits] <- NA
# Split for later addition
coord_digits <- digits / 2
grid_x <- substr(numbers, 1, coord_digits)
grid_y <- substr(numbers, coord_digits + 1, digits)
# Calculate the resolution
resolution <- 10 ^ (5 - coord_digits)
x_num <- as.numeric(grid_x) * resolution
y_num <- as.numeric(grid_y) * resolution
# Build a tibble of in data
in_coords <-
dplyr::tibble(
in_letters = square_letters,
in_ref = x,
resolution = resolution,
in_x = x_num,
in_y = y_num
)
# Get the osgb square lookup
lookup <- osgb_lookup() %>%
dplyr::mutate(
xmin = paste0(x, "00000") %>% as.numeric(),
ymin = paste0(y, "00000") %>% as.numeric()
)
# Perform a joins operation to match up the grid refs with their squares
out_coords <-
in_coords %>%
dplyr::left_join(lookup,
by = c("in_letters" = "square_letters")) %>%
dplyr::mutate(out_x = xmin + in_x,
out_y = ymin + in_y)
# Select and rename variables for clean output
out_coords <-
out_coords %>%
dplyr::select(x = out_x, y = out_y, resolution)
# This could return a spatial object but would have to deal with NA values
return(out_coords)
}
osgridref_to_xy(grid_refs)
library(osgridref)
document
document()
require(devtools)
document
document()
build()
library(osgridref)
build()
library(osgridref)
gridref_to_xy(grid_refs)
build()
library(osgridref)
osgridref::osgridref_to_xy()
install("osgridref")
setwd("..")
install("osgridref")
install("osgridref")
setwd("osgridref")
grid_refs <- c("TA 304 403", "SE 2344 0533", "SE13", "SE 234444 053344")
gridref_to_xy(grid_refs)
library(osgridref)
grid_refs <- c("TA 304 403", "SE 2344 0533", "SE13", "SE 234444 053344")
gridref_to_xy(grid_refs)
devtools::install_github("matthewjwhittle/osgridref")
?gridref_to_xy
toupper("ab")
?grep()
grep("a", "abc")
grep("[0-9]", "abc1")
grepl("[0-9]", "abc1")
document()
build()
devtools::install_github("matthewjwhittle/osgridref")
devtools::install_github("matthewjwhittle/osgridref", force = T)
devtools::install_github("matthewjwhittle/osgridref")
library(osgridref)
osgb_to_xy()
osgb_to_xy("SE1221")
.Deprecated
?.Deprecated
library(osgridref)
osgb_to_xy("SE1221")
